{
  "name": "Punto1-authenticator",
  "tagline": "a very secure authentication module, implementing a lot of features to prevent unauthorized access, credentials theft, data leaks and attacks",
  "body": "# punto1-authenticator\r\n*a very secure authentication module, implementing many features to prevent unauthorized access, credentials theft, data leaks and attacks*\r\n\r\nIf users are to trust their confident data to our systems, they should expect a huge commitment from us to keep their data safe. Authentication is an important part of a secure system. The <a href=\"https://auth.punto1.uno\" title=\"demo authentication module\">P U N T O 1 . U N O</a> authentication module implements many features to prevent unauthorized access, credentials theft, data leaks and attacks. Theoretically, all security is breakable. But to be efficient, breaking the security has to be too costly (in time and other resources) to be worth the effort. Our authentication module addresses man-in-the-middle attacks, replay attacks, brute-force attacks and cross-scripting attacks. \r\n\r\n> The punto1-authenticator is an excellent basis to kickstart a new system. If you are interested \r\n> in using it for your next project, please contact me at  __informes__ __at__ __punto1.uno__. I am willing to \r\n> open source the code after I have gained back the initial investment costs.\r\n\r\nGood securty is complex too. If you are interested, read on! \r\n\r\n\r\n## Monitoring and restricting access:\r\nThe account user has a lot of options in the punto1-authenticator module to restrict and monitor access (2-factor authentication, ip restrictions, email warnings). Login accounts with admin privileges can't reset their credentials, and the admin role is only enabled when the 2-factor authentication (<a href=\"https://en.wikipedia.org/wiki/Time-based_One-time_Password_Algorithm\" title=\"time-based one-time password algorithm\">TOTP</a>) is configured, whereby an application on the user's smartphone generates every 30 seconds a unique code for the login account, which is known by the server by a secret that is shared between the server and the smartphone upon cnfiguration via a QR-code. The login is throttled at 3 attempts within 5 minutes before triggering a timeout. Accounts are easily disabled by users with the admin role, and accounts can also be given temporary access. The system can enforce a user to change his/her credentials periodically, depending on the policy that can be configured differently for every individual user. \r\n\r\n\r\n## Storage:\r\nThe <a href=\"https://password-hashing.net/\">state-of-the-art memory-hard Argon2 hash function</a> is used to store the credentials in the database. Above, the credentials that are hashed by the argon2 function is not the original pass phrase that the user gave, but a sha-512 hash of a long random salt value (different for every login account) and the pass phrase. Hence, even if one would be able to crack the argon2 hash, there is another hash to find collisions for. \r\n\r\n\r\n## Communication between browser & server:\r\nThe credentials are encrypted before they are sent to the server. So even if the login page weren't protected by https <a href=\"https://www.ssllabs.com/ssltest/analyze.html?d=auth.punto1.uno&latest\" title=\"web server configuration audit\">(correctly configured with Forward Secrecy, strong ciphers, http/2, hsts, oscp-stapling, variable DH-params etc.)</a>, the credentials sent to the server can't be intercepted. The credentials are symmetrically encrypted by AES at the browser, and the encryption/decryption key is a hash that is strengthened by the key derivation function pbkdf2. The input for the pbkdf2 hash is a concatenation of 3 strings: the unique one-time server-nonce (generated again for every page request to the login page), the unique one-time client-nonce (generated by the browser every time the login page is loaded), and the pin code or - if configured by the user - the result of the TOTP 2-factor authentication string generated by an application on your smartphone. The resulting cipher text and the client nonce are sent to the server, which has to determine the value for the decryption key first before being able to obtain the credentials, which thereafter has to be verified against the stored hash. \r\n\r\n\r\n## Thwart key loggers:\r\nIn case the user has not configured 2-factor authentication and hence uses a pincode, the surface attack is bit smaller if we can thwart most key loggers. (are we too paranoid here?)\r\n\r\n\r\n## Promotes a high level of Operational Security (\"OPSEC\")\r\nThe weakest link in a system are humans. Choosing weak passwords, don't change passwords frequently and not restricting access can severely endanger the security of a system. The punto1-authenticator enforces policies to use strong passwords, facilitates frequent password changes, obliges to use 2-factor authentication methods if a user wishes to obtain more privileges, logs and notifies any account activity and disables recoverability of the account credentials for accounts with privileged authorizations. All these measures contribute to operational security and to security awareness.\r\n\r\n\r\n## Minimizes the browser as an attack vector\r\nThe browser is designed to execute untrusted code that is downloaded from the internet. As such, it is a favourite vector for  malevolents to hijack sessions, forge requests and run malicious code. \r\nThe code in the punto1-authentication module adheres to the new \"Content Security Policy (CSP)\", by telling the browser via a response header that it should not permit inline style en code, and that only resources from the application's domain are allowed. This prevents most cross-scripting possibilities. Above, for all form requests a unique CSRF token is generated and verified again by the server when forms are submitted. Other measures to counter any possibilities for abuse are: \r\n- The session id of cookie is a random string of 72-character length, preventing brute-force guessing.\r\n- The session id changes upon login and logout, prevents session fixation / replay attacks.\r\n- Session data is stored encrypted on server side\r\n- The session cookie is only set when the site is delivered over https, to prevent session hijacking.\r\n\r\n\r\n## Technology stack:\r\nThe punto1-authenticator module is bloody fast and has a very scalable architecture. Redis is used as a session cache and as the key/value store for an asynchronous message queue, a postgres database as the main data store (with pooled connections off course), the site is optimized for http/2, and multiple uwsgi workers serve the application with nginx as a reverse proxy. \r\nThe main components of the used technology stack:\r\n+ Python 3, Pyramid, SqlAlchemy, jinja2, Beaker\r\n+ Foundation & jquery\r\n+ Postgres & Redis\r\n+ Nginx, uwsgi\r\n\r\n \r\n## Summarized:\r\n+ The original password never leaves the browser! A salted hash is symmetrically encrypted (with a one-time key) before it is sent to the server and stored or verified with the memory-hard argon2 algorithm.\r\n+ The login is validated by comparing the resulting hash of a combination of a 1-time clientnonce, 1-time servernonce, pincode and password hash, to prevent replays. That resulting hash and the clientnonce are the only data that is presented to the server upon login.\r\n+ The risk of key loggers is reduced by using a virtual keyboard for the pin code / TOTP code\r\n+ Brute force attacks are mitigated by login throttling (no more than 3 login attempts per 5 minutes, and then a time-out for 5 minutes).\r\n+ Password should be of at least 10 characters length, and it is enforced to consist of upper case, lower case, digits and special chars.\r\n+ Per login account, an expiration term can be set for the credentials (password & pincode), after which the user is enforced by the system to change his/her credentials.\r\n+ When configured, a login account will only be valid only between the appointed start and end date.\r\n+ Timing attacks are mitigated as much as possible by processing login attempts the same for valid and invalid login accounts.\r\n+ Responses of the server don't give clues that facilitates the guessing the existence of a user account (in the password reset form for instance).\r\n+ The user can configure to retrieve an email after each login.\r\n+ The user can configure to retrieve an email after each unsuccessfull login attempt.\r\n+ Every login attempt is logged.\r\n+ Every account modification is logged.\r\n+ Ability to configure and enfore ip restrictions on the access of a login account (both IPv4 and IPv6).\r\nall forms are protected by <a href=\"https://en.wikipedia.org/wiki/Cross-site_request_forgery\">CSRF</a> tokens.\r\n+ The session cookie is only set when the site is delivered over https, to prevent session hijacking.\r\n+ Sessionid of cookie is a random string of 72-character length, preventing brute-force guessing.\r\n+ Sessionid changes upon login and logout, prevents session fixation / replay attacks.\r\n+ Session data is stored encrypted on server side.\r\n+ ability to upload your public pgp key.\r\n+ The admin role is only activated for a user when he/she has configured the time-based 2-factor authentication method (TOTP).\r\n+ Reset functionality (forgot password, bypass ip restrictions etc) is disabled for login accounts with the admin role.\r\n+ 100% compliant with a strict Secure-Content-Policy of \"default-src 'self'\"\r\n+ Bloody fast and very scalable architecture! (Redis used as a session cache and key/value store for asynchronous message queue, postgres database connections are pooled, optimized for http/2, uwsgi workers with nginx as reverse proxy for the application server)\r\n\r\nÂ© DouweM, punto1.uno, May 2016\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}